{"version":3,"file":"static/js/Home.4e26ad52.chunk.js","mappings":"sNAIaA,EAAe,SAACC,GAAD,OAAwCA,EAAMC,Q,6BCqD1E,EA9CiB,WACf,IAAMC,GCJiCC,EAAAA,EAAAA,MDMvC,GAAuDC,EAAAA,EAAAA,IAAYL,GAA3DM,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,YAEjCC,GAAmBC,EAAAA,EAAAA,cAAY,SAACC,GACpCT,GAASU,EAAAA,EAAAA,IAAcD,MACtB,IAMGE,EAAS,yCAAG,+FACVC,EAASR,EAAKS,aAAaC,QAAQ,IAAKC,EAAAA,IACxCC,EAAQZ,EAAKS,aAAaI,SAAS,KAAO,MAAQ,OAClDC,EAAWf,EAAa,EAAIgB,OAAOhB,GAAcY,EAAAA,GACjDK,EAASd,EACfN,GACEqB,EAAAA,EAAAA,GAAY,CACVT,OAAAA,EACAI,MAAAA,EACAE,SAAAA,EACAE,OAAAA,EACAf,YAAac,OAAOd,MAGxBiB,OAAOC,SAAS,EAAG,GAdH,2CAAH,qDAqBf,OAJAC,EAAAA,EAAAA,YAAU,WACRb,MACC,CAACR,EAAYC,EAAKS,aAAcP,EAAaD,KAG9C,iBAAKoB,UAAU,YAAf,WACE,iBAAKA,UAAU,eAAf,WACE,SAAC,KAAD,CAAYC,MAAOvB,EAAYI,iBAAkBA,KACjD,SAAC,KAAD,CAAMmB,MAAOtB,QAEf,SAAC,KAAD,KACA,SAAC,KAAD,CAAYC,YAAaA,EAAasB,aAhCrB,SAACC,GACpB5B,GAAS6B,EAAAA,EAAAA,IAAeD","sources":["redux/filter/selectors.ts","pages/Home.tsx","redux/types/index.ts"],"sourcesContent":["import { FilterSliceState, Sort } from './types';\n\nimport { RootState } from 'redux/types';\n\nexport const selectFilter = (state: RootState): FilterSliceState => state.filter;\nexport const selectSort = (state: RootState): Sort => state.filter.sort;\n","import React, { FC, useCallback, useEffect } from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Categories, Sort, Pagination, AllPizzas } from 'components';\nimport { EMPTY_STRING } from 'constants/variables';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setCategoryId, setCurrentPage } from 'redux/filter/slice';\nimport { fetchPizzas } from 'redux/pizza/asyncActions';\nimport { useAppDispatch } from 'redux/types';\n\nconst Home: FC = () => {\n  const dispatch = useAppDispatch();\n\n  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);\n\n  const onChangeCategory = useCallback((idx: number): void => {\n    dispatch(setCategoryId(idx));\n  }, []);\n\n  const onChangePage = (page: number): void => {\n    dispatch(setCurrentPage(page));\n  };\n\n  const getPizzas = async (): Promise<any> => {\n    const sortBy = sort.sortProperty.replace('-', EMPTY_STRING);\n    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';\n    const category = categoryId > 0 ? String(categoryId) : EMPTY_STRING;\n    const search = searchValue;\n    dispatch(\n      fetchPizzas({\n        sortBy,\n        order,\n        category,\n        search,\n        currentPage: String(currentPage),\n      }),\n    );\n    window.scrollTo(0, 0);\n  };\n\n  useEffect(() => {\n    getPizzas();\n  }, [categoryId, sort.sortProperty, searchValue, currentPage]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"content__top\">\n        <Categories value={categoryId} onChangeCategory={onChangeCategory} />\n        <Sort value={sort} />\n      </div>\n      <AllPizzas />\n      <Pagination currentPage={currentPage} onChangePage={onChangePage} />\n    </div>\n  );\n};\n\nexport default Home;\n","import { useDispatch } from 'react-redux';\n\nimport { store } from 'redux/store';\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = (): any => useDispatch<AppDispatch>();\n"],"names":["selectFilter","state","filter","dispatch","useDispatch","useSelector","categoryId","sort","currentPage","searchValue","onChangeCategory","useCallback","idx","setCategoryId","getPizzas","sortBy","sortProperty","replace","EMPTY_STRING","order","includes","category","String","search","fetchPizzas","window","scrollTo","useEffect","className","value","onChangePage","page","setCurrentPage"],"sourceRoot":""}